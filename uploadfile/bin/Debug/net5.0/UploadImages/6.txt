1. Explain Inheritance with example ?(Animal.cs)
-->In C#, inheritance allows us to create a new class from an existing class. It is a key feature of Object-Oriented Programming (OOP).
The class from which a new class is created is known as the base class (parent or superclass). And, the new class is called derived class (child or subclass)
The derived class inherits the fields and methods of the base class. This helps with the code reusability in C#.
------------------------------------------------------------
2. Explain hierarchical inheritance with example?(Father.cs)
-->Hierarchical inheritance describes a situation in which a parent class is inherited by multiple subclasses. 
A type of inheritance in which more than one class is inherited from a single parent or base class is known as hierarchical inheritance.
------------------------------------------------------------ 
3. Explain multi level inheritance with example?
-->In the Multilevel inheritance, a derived class will inherit a base class and as well as the derived class also act as the base class to other class. 
For example, three classes called A, B, and C, as shown in the below image, where class C is derived from class B and class B, is derived from class A. 
In this situation, each derived class inherit all the characteristics of its base classes. So class C inherits all the features of class A and B.
--------------------------------------------------------------
4. Explain method overloading with example?
-------------------------------------------------------------
5. Explain method overriding with example?
-->Method Overriding in C# is similar to the virtual function in C++. Method Overriding is a technique that allows the invoking of functions from another class (base class) in the derived class. Creating a method in the derived class with the same signature as a method in the base class is called as method overriding. 
In simple words, Overriding is a feature that allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature and same return type(or sub-type) as a method in its super-class, then the method in the subclass is said to override the method in the super-class. Method overriding is one of the ways by which C# achieve Run Time Polymorphism(Dynamic Polymorphism).
The method that is overridden by an override declaration is called the overridden base method.
 An override method is a new implementation of a member that is inherited from a base class. The overridden base method must be virtual, abstract, or override.
----------------------------------------------------------------
6. Explain Interfaces and it's rules with example ?
----------------------------------------------------------------
7. Difference between class and interface?
-->1.The basic difference is that a class has both a definition and an implementation whereas an interface only has a definition. Interfaces are actually implemented via a class. (Due to this an interface supports the concept of multiple inheritances.)
2.Interfaces are developed in Java to implement the concept of multiple inheritance whereas classes are not used to implement multiple inheritance.
3.No memory is allocate for the interfaces whereas the memory is allocated for the classes.
4.Classes are templates for objects. The attributes of objects are defined by the components of the class, that describe the state and behaviour of objects. A class contains attributes, methods and events as its components. Interfaces contain only method prototypes, they don't provide an implementation of its methods, we can provide an implementation of its methods in our class, for that we can implement the interface. An interface is the source for polymorphism.
5.Interfaces are always implemented whereas classes are always extended.
6.The access specifiers private, public and protected are possible with classes. But interfaces can have only one specifier, public.
----------------------------------------------------------------------
8. Explain polymorphism with example?
9. Difference between compile time polymorphism and run time polymorphism